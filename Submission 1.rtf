{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue255;\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;
\red15\green112\blue1;\red144\green1\blue18;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;
\cssrgb\c0\c50196\c0;\cssrgb\c63922\c8235\c8235;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29720\viewh18680\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 from\cf0 \strokec4  AlgorithmImports \cf2 \strokec2 import\cf0 \strokec4  *\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  numpy \cf2 \strokec2 as\cf0 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  pandas \cf2 \strokec2 as\cf0 \strokec4  pd\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  sklearn.decomposition \cf2 \strokec2 import\cf0 \strokec4  PCA\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  sklearn.model_selection \cf2 \strokec2 import\cf0 \strokec4  TimeSeriesSplit\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  tensorflow.keras.models \cf2 \strokec2 import\cf0 \strokec4  Sequential\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  tensorflow.keras.layers \cf2 \strokec2 import\cf0 \strokec4  LSTM, Dense, Dropout\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  scipy.optimize \cf2 \strokec2 import\cf0 \strokec4  minimize\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  scipy.stats \cf2 \strokec2 import\cf0 \strokec4  norm\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 class\cf0 \strokec4  \cf6 \strokec6 AdaptivePortfolioAlgorithm\cf0 \strokec4 (\cf6 \strokec6 QCAlgorithm\cf0 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 Initialize\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ):\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .SetStartDate(\cf9 \strokec9 2020\cf0 \strokec4 , \cf9 \strokec9 4\cf0 \strokec4 , \cf9 \strokec9 1\cf0 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .SetEndDate(\cf9 \strokec9 2024\cf0 \strokec4 , \cf9 \strokec9 8\cf0 \strokec4 , \cf9 \strokec9 31\cf0 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .SetCash(\cf9 \strokec9 1000000000\cf0 \strokec4 )  \cf10 \strokec10 # Adjusted for 1bn AUM\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .symbols = [\cb1 \
\cb3             \cf11 \strokec11 "SPY"\cf0 \strokec4 , \cf11 \strokec11 "EFA"\cf0 \strokec4 , \cf11 \strokec11 "EEM"\cf0 \strokec4 , \cf11 \strokec11 "VIG"\cf0 \strokec4 , \cf11 \strokec11 "SHY"\cf0 \strokec4 ,\cb1 \
\cb3             \cf11 \strokec11 "LQD"\cf0 \strokec4 , \cf11 \strokec11 "EMB"\cf0 \strokec4 , \cf11 \strokec11 "MUB"\cf0 \strokec4 , \cf11 \strokec11 "TIP"\cf0 \strokec4 , \cf11 \strokec11 "VNQ"\cf0 \strokec4 , \cf11 \strokec11 "XLE"\cf0 \strokec4 ,\cb1 \
\cb3             \cf11 \strokec11 "GLD"\cf0 \strokec4 , \cf11 \strokec11 "TLT"\cf0 \strokec4 , \cf11 \strokec11 "UUP"\cf0 \strokec4   \cf10 \strokec10 # Added Gold, Long-Term Treasuries, US Dollar Index\cf0 \cb1 \strokec4 \
\cb3         ]\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .assets = [\cf5 \strokec5 self\cf0 \strokec4 .AddEquity(symbol, Resolution.Daily).Symbol \cf2 \strokec2 for\cf0 \strokec4  symbol \cf2 \strokec2 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .symbols]\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .lookback = \cf9 \strokec9 24\cf0 \strokec4  * \cf9 \strokec9 21\cf0 \strokec4   \cf10 \strokec10 # 24 months of data (21 trading days per month)\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .rebalance = \cf9 \strokec9 30\cf0 \strokec4  * \cf9 \strokec9 3\cf0 \strokec4   \cf10 \strokec10 # Rebalance quarterly\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .last_rebalance_time = \cf5 \strokec5 self\cf0 \strokec4 .Time\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .data = \{\}\cb1 \
\cb3         \cf2 \strokec2 for\cf0 \strokec4  symbol \cf2 \strokec2 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .assets:\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .data[symbol] = RollingWindow[TradeBar](\cf5 \strokec5 self\cf0 \strokec4 .lookback)\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .max_drawdown_limit = \cf9 \strokec9 0.15\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .var_limit = \cf9 \strokec9 0.02\cf0 \strokec4   \cf10 \strokec10 # VaR 99% less than 2% of AUM\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .portfolio_value_history = RollingWindow[\cf6 \strokec6 float\cf0 \strokec4 ](\cf5 \strokec5 self\cf0 \strokec4 .lookback)\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .market_cap_weights = \cf5 \strokec5 self\cf0 \strokec4 .GetMarketCapWeights()\cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .tau = \cf9 \strokec9 0.025\cf0 \strokec4   \cf10 \strokec10 # Tau, uncertainty in the prior\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .risk_aversion = \cf9 \strokec9 3.0\cf0 \strokec4   \cf10 \strokec10 # Risk aversion coefficient\cf0 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 OnData\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 data\cf0 \strokec4 ):\cb1 \
\cb3         \cf2 \strokec2 for\cf0 \strokec4  symbol \cf2 \strokec2 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .assets:\cb1 \
\cb3             \cf2 \strokec2 if\cf0 \strokec4  data.Bars.ContainsKey(symbol):\cb1 \
\cb3                 \cf5 \strokec5 self\cf0 \strokec4 .data[symbol].Add(data.Bars[symbol])\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 self\cf0 \strokec4 .portfolio_value_history.Add(\cf5 \strokec5 self\cf0 \strokec4 .Portfolio.TotalPortfolioValue)\cb1 \
\cb3         \cf2 \strokec2 if\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .Time - \cf5 \strokec5 self\cf0 \strokec4 .last_rebalance_time >= timedelta(\cf8 \strokec8 days\cf0 \strokec4 =\cf5 \strokec5 self\cf0 \strokec4 .rebalance):\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .RebalancePortfolio()\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .last_rebalance_time = \cf5 \strokec5 self\cf0 \strokec4 .Time\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 GetMarketCapWeights\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Mock example for market cap weights (assumed to be equal here)\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  np.ones(\cf7 \strokec7 len\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .assets)) / \cf7 \strokec7 len\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .assets)\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 GetMarketImpliedReturns\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 cov_matrix\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Calculate the implied equilibrium returns (Pi) using CAPM\cf0 \cb1 \strokec4 \
\cb3         Pi = \cf5 \strokec5 self\cf0 \strokec4 .risk_aversion * np.dot(cov_matrix, \cf5 \strokec5 self\cf0 \strokec4 .market_cap_weights)\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  Pi\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 GetInvestorViews\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Example of investor views\cf0 \cb1 \strokec4 \
\cb3         P = np.array([\cb1 \
\cb3             [\cf9 \strokec9 1\cf0 \strokec4 , -\cf9 \strokec9 1\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 ],  \cf10 \strokec10 # View: SPY outperforms EFA by 7%\cf0 \cb1 \strokec4 \
\cb3             [\cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 1\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 , \cf9 \strokec9 0\cf0 \strokec4 ]   \cf10 \strokec10 # View: EEM expected to return 2%\cf0 \cb1 \strokec4 \
\cb3         ])\cb1 \
\cb3         Q = np.array([\cf9 \strokec9 0.1\cf0 \strokec4 , \cf9 \strokec9 0.02\cf0 \strokec4 ])  \cf10 \strokec10 # Expected returns for the views\cf0 \cb1 \strokec4 \
\cb3         Omega = np.diag([\cf9 \strokec9 0.0001\cf0 \strokec4 , \cf9 \strokec9 0.0001\cf0 \strokec4 ])  \cf10 \strokec10 # Uncertainty in views, diagonal covariance matrix\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  P, Q, Omega\cb1 \
\
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 BlackLitterman\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 Pi\cf0 \strokec4 , \cf8 \strokec8 cov_matrix\cf0 \strokec4 , \cf8 \strokec8 P\cf0 \strokec4 , \cf8 \strokec8 Q\cf0 \strokec4 , \cf8 \strokec8 Omega\cf0 \strokec4 ):\cb1 \
\cb3         n = cov_matrix.shape[\cf9 \strokec9 0\cf0 \strokec4 ]  \cf10 \strokec10 # Number of assets\cf0 \cb1 \strokec4 \
\cb3         k = P.shape[\cf9 \strokec9 0\cf0 \strokec4 ]           \cf10 \strokec10 # Number of views\cf0 \cb1 \strokec4 \
\
\cb3         \cf10 \strokec10 # Adjust P matrix to include all assets with zeros for those not in the view\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf0 \strokec4  P.shape[\cf9 \strokec9 1\cf0 \strokec4 ] < n:\cb1 \
\cb3             P_full = np.zeros((k, n))\cb1 \
\cb3             P_full[:, :P.shape[\cf9 \strokec9 1\cf0 \strokec4 ]] = P\cb1 \
\cb3         \cf2 \strokec2 else\cf0 \strokec4 :\cb1 \
\cb3             P_full = P\cb1 \
\
\cb3         \cf10 \strokec10 # Ensure proper dimensions of tau_cov_matrix and other matrices\cf0 \cb1 \strokec4 \
\cb3         tau_cov_matrix = \cf5 \strokec5 self\cf0 \strokec4 .tau * cov_matrix\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Calculate P.T * inv(Omega) * P\cf0 \cb1 \strokec4 \
\cb3         PT_Omega_inv_P = np.dot(P_full.T, np.dot(np.linalg.inv(Omega), P_full))\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Calculate the adjusted covariance matrix\cf0 \cb1 \strokec4 \
\cb3         M_inverse = np.linalg.inv(PT_Omega_inv_P + tau_cov_matrix)\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Calculate the adjusted returns\cf0 \cb1 \strokec4 \
\cb3         adjusted_returns = np.dot(M_inverse, np.dot(P_full.T, np.dot(np.linalg.inv(Omega), Q)) + np.dot(tau_cov_matrix, Pi))\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  adjusted_returns\cb1 \
\
\
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 OptimizePortfolio\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 mu_BL\cf0 \strokec4 , \cf8 \strokec8 cov_matrix\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Mean-variance optimization to determine portfolio weights\cf0 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 portfolio_utility\cf0 \strokec4 (\cf8 \strokec8 weights\cf0 \strokec4 , \cf8 \strokec8 mu_BL\cf0 \strokec4 , \cf8 \strokec8 cov_matrix\cf0 \strokec4 ):\cb1 \
\cb3             \cf2 \strokec2 return\cf0 \strokec4  -(np.dot(weights, mu_BL) - \cf5 \strokec5 self\cf0 \strokec4 .risk_aversion * np.dot(weights.T, np.dot(cov_matrix, weights)) / \cf9 \strokec9 2\cf0 \strokec4 )\cb1 \
\
\cb3         num_assets = \cf7 \strokec7 len\cf0 \strokec4 (mu_BL)\cb1 \
\cb3         constraints = \{\cf11 \strokec11 'type'\cf0 \strokec4 : \cf11 \strokec11 'eq'\cf0 \strokec4 , \cf11 \strokec11 'fun'\cf0 \strokec4 : \cf5 \strokec5 lambda\cf0 \strokec4  \cf8 \strokec8 weights\cf0 \strokec4 : np.sum(weights) - \cf9 \strokec9 1\cf0 \strokec4 \}  \cf10 \strokec10 # Sum of weights equals 1\cf0 \cb1 \strokec4 \
\cb3         bounds = \cf6 \strokec6 tuple\cf0 \strokec4 ((\cf9 \strokec9 0.05\cf0 \strokec4 , \cf9 \strokec9 0.35\cf0 \strokec4 ) \cf2 \strokec2 for\cf0 \strokec4  _ \cf2 \strokec2 in\cf0 \strokec4  \cf7 \strokec7 range\cf0 \strokec4 (num_assets))  \cf10 \strokec10 # Weight bounds between 5% and 35%\cf0 \cb1 \strokec4 \
\
\cb3         initial_guess = np.ones(num_assets) / num_assets\cb1 \
\cb3         result = minimize(portfolio_utility, initial_guess, \cf8 \strokec8 args\cf0 \strokec4 =(mu_BL, cov_matrix), \cf8 \strokec8 method\cf0 \strokec4 =\cf11 \strokec11 'SLSQP'\cf0 \strokec4 , \cf8 \strokec8 bounds\cf0 \strokec4 =bounds, \cf8 \strokec8 constraints\cf0 \strokec4 =constraints)\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  result.x\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 PerformPCA\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 X\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Perform Principal Component Analysis (PCA)\cf0 \cb1 \strokec4 \
\cb3         pca = PCA(\cf8 \strokec8 n_components\cf0 \strokec4 =\cf9 \strokec9 0.95\cf0 \strokec4 )  \cf10 \strokec10 # Retain 95% of the variance\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  pca.fit_transform(X)\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 TrainLSTM\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 X_train\cf0 \strokec4 , \cf8 \strokec8 y_train\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Train LSTM model\cf0 \cb1 \strokec4 \
\cb3         model = Sequential()\cb1 \
\cb3         model.add(LSTM(\cf9 \strokec9 128\cf0 \strokec4 , \cf8 \strokec8 input_shape\cf0 \strokec4 =(X_train.shape[\cf9 \strokec9 1\cf0 \strokec4 ], X_train.shape[\cf9 \strokec9 2\cf0 \strokec4 ]), \cf8 \strokec8 return_sequences\cf0 \strokec4 =\cf5 \strokec5 True\cf0 \strokec4 ))\cb1 \
\cb3         model.add(Dropout(\cf9 \strokec9 0.2\cf0 \strokec4 ))\cb1 \
\cb3         model.add(LSTM(\cf9 \strokec9 128\cf0 \strokec4 ))\cb1 \
\cb3         model.add(Dropout(\cf9 \strokec9 0.2\cf0 \strokec4 ))\cb1 \
\cb3         model.add(Dense(\cf9 \strokec9 1\cf0 \strokec4 ))\cb1 \
\cb3         model.compile(\cf8 \strokec8 optimizer\cf0 \strokec4 =\cf11 \strokec11 'adam'\cf0 \strokec4 , \cf8 \strokec8 loss\cf0 \strokec4 =\cf11 \strokec11 'mse'\cf0 \strokec4 )\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Use TimeSeriesSplit for better validation\cf0 \cb1 \strokec4 \
\cb3         tscv = TimeSeriesSplit(\cf8 \strokec8 n_splits\cf0 \strokec4 =\cf9 \strokec9 5\cf0 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 for\cf0 \strokec4  train_idx, val_idx \cf2 \strokec2 in\cf0 \strokec4  tscv.split(X_train):\cb1 \
\cb3             model.fit(X_train[train_idx], y_train[train_idx], \cb1 \
\cb3                       \cf8 \strokec8 validation_data\cf0 \strokec4 =(X_train[val_idx], y_train[val_idx]), \cb1 \
\cb3                       \cf8 \strokec8 epochs\cf0 \strokec4 =\cf9 \strokec9 10\cf0 \strokec4 , \cf8 \strokec8 batch_size\cf0 \strokec4 =\cf9 \strokec9 32\cf0 \strokec4 , \cf8 \strokec8 verbose\cf0 \strokec4 =\cf9 \strokec9 0\cf0 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  model\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 PredictReturns\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 model\cf0 \strokec4 , \cf8 \strokec8 X_test\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Predict returns using the trained LSTM model\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  model.predict(X_test)\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 RebalancePortfolio\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ):\cb1 \
\cb3         prices = np.array([[bar.Close \cf2 \strokec2 for\cf0 \strokec4  bar \cf2 \strokec2 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .data[symbol]] \cf2 \strokec2 for\cf0 \strokec4  symbol \cf2 \strokec2 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .assets])\cb1 \
\cb3         returns = prices[:, \cf9 \strokec9 1\cf0 \strokec4 :] / prices[:, :-\cf9 \strokec9 1\cf0 \strokec4 ] - \cf9 \strokec9 1\cf0 \cb1 \strokec4 \
\cb3         returns = returns.T\cb1 \
\cb3         \cb1 \
\cb3         pca_data = \cf5 \strokec5 self\cf0 \strokec4 .PerformPCA(returns)\cb1 \
\cb3         X_train, y_train = pca_data[:-\cf9 \strokec9 1\cf0 \strokec4 ], returns[\cf9 \strokec9 1\cf0 \strokec4 :, :]  \cf10 \strokec10 # Use proper time-series splitting\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         model = \cf5 \strokec5 self\cf0 \strokec4 .TrainLSTM(X_train.reshape((X_train.shape[\cf9 \strokec9 0\cf0 \strokec4 ], X_train.shape[\cf9 \strokec9 1\cf0 \strokec4 ], \cf9 \strokec9 1\cf0 \strokec4 )), y_train)\cb1 \
\cb3         predictions = \cf5 \strokec5 self\cf0 \strokec4 .PredictReturns(model, X_train.reshape((X_train.shape[\cf9 \strokec9 0\cf0 \strokec4 ], X_train.shape[\cf9 \strokec9 1\cf0 \strokec4 ], \cf9 \strokec9 1\cf0 \strokec4 )))\cb1 \
\cb3         \cb1 \
\cb3         cov_matrix = np.cov(returns.T)\cb1 \
\cb3         predictions = predictions.flatten()[:\cf7 \strokec7 len\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .assets)]  \cf10 \strokec10 # Ensure the number of predictions matches the number of assets\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Step 1: Calculate the market-implied returns (Pi)\cf0 \cb1 \strokec4 \
\cb3         Pi = \cf5 \strokec5 self\cf0 \strokec4 .GetMarketImpliedReturns(cov_matrix)\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Step 2: Define the investor views (P, Q, Omega)\cf0 \cb1 \strokec4 \
\cb3         P, Q, Omega = \cf5 \strokec5 self\cf0 \strokec4 .GetInvestorViews()\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Step 3: Calculate the Black-Litterman expected returns (mu_BL)\cf0 \cb1 \strokec4 \
\cb3         mu_BL = \cf5 \strokec5 self\cf0 \strokec4 .BlackLitterman(Pi, cov_matrix, P, Q, Omega)\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Step 4: Optimize the portfolio using the Black-Litterman adjusted returns\cf0 \cb1 \strokec4 \
\cb3         weights = \cf5 \strokec5 self\cf0 \strokec4 .OptimizePortfolio(mu_BL, cov_matrix)\cb1 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Apply weights only if constraints are met\cf0 \cb1 \strokec4 \
\cb3         current_drawdown = \cf5 \strokec5 self\cf0 \strokec4 .CalculateMaxDrawdown()\cb1 \
\cb3         current_var = \cf5 \strokec5 self\cf0 \strokec4 .CalculateVaR(predictions, cov_matrix)\cb1 \
\cb3         \cb1 \
\cb3         \cf2 \strokec2 if\cf0 \strokec4  current_drawdown >= \cf5 \strokec5 self\cf0 \strokec4 .max_drawdown_limit \cf5 \strokec5 or\cf0 \strokec4  current_var >= \cf5 \strokec5 self\cf0 \strokec4 .var_limit:\cb1 \
\cb3             \cf10 \strokec10 # Shift to risk-free asset (e.g., SHY) if constraints are breached\cf0 \cb1 \strokec4 \
\cb3             weights = np.zeros(\cf7 \strokec7 len\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .assets))\cb1 \
\cb3             weights[\cf5 \strokec5 self\cf0 \strokec4 .symbols.index(\cf11 \strokec11 "SHY"\cf0 \strokec4 )] = \cf9 \strokec9 1.0\cf0 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         \cf10 \strokec10 # Apply the optimized weights to the portfolio\cf0 \cb1 \strokec4 \
\cb3         allocation = \{asset: \cf6 \strokec6 float\cf0 \strokec4 (weight) \cf2 \strokec2 for\cf0 \strokec4  asset, weight \cf2 \strokec2 in\cf0 \strokec4  \cf7 \strokec7 zip\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .assets, weights)\}\cb1 \
\cb3         \cf2 \strokec2 for\cf0 \strokec4  symbol, weight \cf2 \strokec2 in\cf0 \strokec4  allocation.items():\cb1 \
\cb3             \cf5 \strokec5 self\cf0 \strokec4 .SetHoldings(symbol, weight)\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 CalculateMaxDrawdown\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ):\cb1 \
\cb3         peak_value = \cf7 \strokec7 max\cf0 \strokec4 (\cf5 \strokec5 self\cf0 \strokec4 .portfolio_value_history)\cb1 \
\cb3         drawdown = (peak_value - \cf5 \strokec5 self\cf0 \strokec4 .Portfolio.TotalPortfolioValue) / peak_value\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  drawdown\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 CalculateVaR\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 , \cf8 \strokec8 predictions\cf0 \strokec4 , \cf8 \strokec8 cov_matrix\cf0 \strokec4 , \cf8 \strokec8 confidence_level\cf0 \strokec4 =\cf9 \strokec9 0.99\cf0 \strokec4 ):\cb1 \
\cb3         portfolio_mean = np.dot(predictions, predictions.mean())\cb1 \
\cb3         portfolio_std = np.sqrt(np.dot(predictions.T, np.dot(cov_matrix, predictions)))\cb1 \
\cb3         var = norm.ppf(confidence_level) * portfolio_std\cb1 \
\cb3         \cf2 \strokec2 return\cf0 \strokec4  var / \cf5 \strokec5 self\cf0 \strokec4 .Portfolio.TotalPortfolioValue\cb1 \
\
\cb3     \cf5 \strokec5 def\cf0 \strokec4  \cf7 \strokec7 ApplyTailRiskHedging\cf0 \strokec4 (\cf8 \strokec8 self\cf0 \strokec4 ):\cb1 \
\cb3         \cf10 \strokec10 # Implement a protective put strategy\cf0 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 for\cf0 \strokec4  symbol \cf2 \strokec2 in\cf0 \strokec4  \cf5 \strokec5 self\cf0 \strokec4 .assets:\cb1 \
\cb3             current_price = \cf5 \strokec5 self\cf0 \strokec4 .Securities[symbol].Price\cb1 \
\cb3             strike_price = current_price * \cf9 \strokec9 0.9\cf0 \strokec4   \cf10 \strokec10 # Example: 10% OTM protective put\cf0 \cb1 \strokec4 \
\cb3             expiry = \cf5 \strokec5 self\cf0 \strokec4 .Time + timedelta(\cf8 \strokec8 days\cf0 \strokec4 =\cf9 \strokec9 30\cf0 \strokec4 )  \cf10 \strokec10 # Example: 1 month to expiry\cf0 \cb1 \strokec4 \
\cb3             \cb1 \
\cb3             option = \cf5 \strokec5 self\cf0 \strokec4 .AddOption(symbol)\cb1 \
\cb3             option.SetFilter(-\cf9 \strokec9 5\cf0 \strokec4 , \cf9 \strokec9 5\cf0 \strokec4 , timedelta(\cf9 \strokec9 25\cf0 \strokec4 , \cf9 \strokec9 35\cf0 \strokec4 ))\cb1 \
\cb3             \cb1 \
\cb3             contracts = option.OptionChainProvider.GetOptionContractList(symbol, expiry)\cb1 \
\cb3             put_contracts = [contract \cf2 \strokec2 for\cf0 \strokec4  contract \cf2 \strokec2 in\cf0 \strokec4  contracts \cf2 \strokec2 if\cf0 \strokec4  contract.Strike < current_price \cf5 \strokec5 and\cf0 \strokec4  contract.Right == OptionRight.Put]\cb1 \
\cb3             \cf2 \strokec2 if\cf0 \strokec4  put_contracts:\cb1 \
\cb3                 best_contract = \cf7 \strokec7 min\cf0 \strokec4 (put_contracts, \cf8 \strokec8 key\cf0 \strokec4 =\cf5 \strokec5 lambda\cf0 \strokec4  \cf8 \strokec8 x\cf0 \strokec4 : \cf7 \strokec7 abs\cf0 \strokec4 (x.Strike - strike_price))\cb1 \
\cb3                 \cf5 \strokec5 self\cf0 \strokec4 .Buy(best_contract.Symbol, \cf9 \strokec9 1\cf0 \strokec4 )  \cf10 \strokec10 # Example: Buy 1 protective put contract\cf0 \cb1 \strokec4 \
\
}